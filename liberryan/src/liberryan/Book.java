package liberryan;

import java.time.Instant;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

// Represents a book.
public class Book {
    private final List<ProgressUpdate> progressUpdates;
    private int totalPagesRead;
    private Genre genre;
    private String name;
    private String author;
    private int pageCount;
    private Rating rating;
    private LocalDate publishedDate;

    public Book(List<ProgressUpdate> progressUpdates,
                Genre genre,
                String name,
                String author,
                int pageCount,
                Rating rating,
                LocalDate publishedDate) {
        // default progressUpdates to an empty list.
        this.progressUpdates = progressUpdates == null ? new ArrayList<>() : progressUpdates;
        this.totalPagesRead = computeTotalPagesRead();
        this.genre = genre;
        this.name = name;
        this.author = author;
        this.pageCount = pageCount;
        this.rating = rating;
        this.publishedDate = publishedDate;
    }

    // Requires: Nothing.
    // Modifies: Nothing.
    // Effects: Computes the total number of pages read by summing up the pages read of every progress update so far.
    private int computeTotalPagesRead() {
        return progressUpdates.stream().mapToInt(ProgressUpdate::getPagesRead).sum();
    }

    // Getters and setters.
    // Only the non-autogenerated ones are documented.

    public int getCurrentPage() {
        return totalPagesRead;
    }

    // Requires: int page - current page number.
    // Modifies: progressUpdates, totalPagesRead.
    // Effects: Sets the current page in the book. Internally, the cached number of total pages read is updated and
    // a progress update is added.
    public void setCurrentPage(int page) {
        ProgressUpdate update = new ProgressUpdate(page - totalPagesRead);
        totalPagesRead = page;
        progressUpdates.add(update);
    }

    public List<ProgressUpdate> getProgressUpdates() {
        return progressUpdates;
    }

    // Requires: Instant startTime - start time for progress updates that should be considered, Instant endTime - end
    // time for progress updates that should be considered.
    // Modifies: Nothing.
    // Effects: Returns the total number of pages read in this book between startTime and endTime.
    public int getPagesReadBetween(Instant startTime, Instant endTime) {
        return progressUpdates.stream()
                .filter(update -> update.getTime().isAfter(startTime) && update.getTime().isBefore(endTime))
                .mapToInt(ProgressUpdate::getPagesRead)
                .sum();
    }

    public Genre getGenre() {
        return genre;
    }

    public void setGenre(Genre genre) {
        this.genre = genre;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public int getPageCount() {
        return pageCount;
    }

    public void setPageCount(int pageCount) {
        this.pageCount = pageCount;
    }

    public Rating getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = new Rating(rating);
    }

    public LocalDate getPublishedDate() {
        return publishedDate;
    }

    public void setPublishedDate(LocalDate publishedDate) {
        this.publishedDate = publishedDate;
    }

    @Override
    public String toString() {
        return name;
    }

    // An enumeration of fields on books.
    public enum Field {
        CURRENT_PAGE,
        GENRE,
        NAME,
        AUTHOR,
        PAGE_COUNT,
        RATING,
        PUBLISHED_DATE,
    }
}
